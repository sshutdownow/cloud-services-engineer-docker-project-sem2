В этой проектной работе вам нужно настроить контейнеризацию существующего приложения с использованием Docker и Docker Compose, а также обеспечить безопасность образов и контейнеров.

В репозитории проекта есть две части:

    backend — бэкенд приложения (Go).
    frontend — фронтенд приложения (Vue.js).

Также в репозитории находятся файлы:

    .gitattributes и .gitignore — файлы для Git, которые менять не нужно.
    docker-compose.yml — пустой файл, предназначенный для Docker Compose.
    .github/workflows/deploy.yaml — базовый пайплайн, в него можно добавлять новые задания или шаги, но нельзя изменять или удалять существующие.
    ./backend/Dockerfile и ./frontend/Dockerfile — пустые Dockerfile для бэкенда и фронтенда.

Задачи
В рамках проекта вам предстоит:

    Оптимизировать Dockerfile для бэкенда и фронтенда.
    Настроить Docker Compose для оркестрации контейнеров.
    Реализовать необходимые меры безопасности на всех уровнях.

1. Dockerfile для бэкенда и фронтенда
Оптимизируйте два Dockerfile для бэкенда и фронтенда приложения, с помощью которых обе части приложения могут быть собраны. По желанию можно реализовать многоэтапную сборку и оптимизировать размер образов.
Для выполнения этой задачи будет полезно вспомнить, что такое слои, как работает кэширование и как правильно нужно запускать контейнеры. В этом вам помогут уроки из модуля 1 «Основы контейнеризации и Docker» и урок «Организация multi-stage builds (Docker)».
2. Docker Compose
Создайте docker-compose.yml с определением всех сервисов, чтобы приложение смогло полностью собраться, а все контейнеры — запуститься. Также можете настроить изолированные сети и volumes с правильными правами доступа.
Реализовать эту задачу вам помогут материалы из темы «Docker Compose: основы» и модуля «Основы контейнеризации и Docker».
3. Безопасность
Уделите особое внимание обеспечению безопасности образов и контейнеров. Используйте инструменты и практики в рамках Docker для улучшения безопасности сборки образов и эксплуатации приложения. 
Чтобы реализовать задачи и секции по безопасности, используйте уроки из темы «Безопасность контейнеров. Лучшие практики работы». Попробуйте использовать инструменты вроде Trivy для анализа уязвимостей, а также можно включить их в CI/CD-пайплайн или описать их использование в README.md. Также помните, что хранить секреты в образах Docker напрямую — это очень плохая идея.
